# -*- coding: utf-8 -*-
"""2024_season_predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7wFzyOk_0oNIViNhfccGyFpTM20uz-b
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from scipy.stats import pearsonr
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('Season - Team Score.csv')

tor=[1458,	9.1,	3.1,	1.2,	.289,	.732,	4.01,	4.21,	16.3,	6240,	.256,	.330,	.429,	.329,	-8.9,	76.6,	8.5,	27]
bal=[1458,	8.5,	3.0,	1.2,	.290,	.731,	4.07,	4.29,	12.7,	6240,	.254,	.326,	.429,	.326,	-5,	71.9,	11.4,	27.2]
tb=[1458,	9.1,	2.9,	1.2,	.29,	.725,	3.95,	4.05,	15.9,	6240,	0.247,	0.324,	.419,	.323,	-2.5,68.9,	1.5,	26.2]
bos=[1458,	8.7,	3.3,	1.2,	.305,	.705,	4.47,	4.33,	14.9,6240,	.260,	.334,	.439,	.334,	-4.5,	45.7,	-8.4,	22.7]
nyy=[1458,	9.1,	3.1,	1.2,	.287,	.723,	4.07,	4.21,	15.6,6240,	.250,	.337,	.441,	.336,	-11.6,	119.9,	23.0,	32.5]
cle=[1458,	8.9,	3.2,	1.2,	.291,	.727,	4.08,	4.22,	14.6, 6240,	.253,	.325,	.407,	.317,	-0.1,22.0,	35.0,	25.1]
kc=[1458,	8.1,	3.4,	1.2,	.300,	.703,	4.55,	4.49,	11.5,6240,	.255,	.319,	.427,	.322,	-6.3,	-1.4,	-12.4,	17.4]
det=[1458,	8.5,	3.2,	1.2,	.295,	.707,	4.25,	4.22,	13.6,6240,	.246,	.318,	.410,	.316,	-6.1,-1.2,	-2.6,	18.4]
min=[1458,	9.1,	2.8,	1.2,	.295,	.717,	4.07,	4.04,	18.2,6240,	.247,	.324,	.422,	.323,	-8.9,	47.8,	14.3,	24.7]
cws=[1458,	8.5,	3.9,	1.4,	.293,	.708,	4.66,	4.76,	9.5,6240,	.246,	.310,	.407,	.311,	-9.5,	-34.8,	-0.3,	14.9]
laa=[1458,	8.7,	3.5,	1.3,	.295,	.715,	4.45,	4.56,	13.2,6240,	.249,	.329,	.430,	.328,	-10.6,50.9,	-32.1,	20.2]
hou=[1458,	8.9,	3.3,	1.2,	.290,	.728,	4.01,	4.19,	16.7,6240,	.263,	.337,	.449,	.339,	-8.9,124.7,-0.5,	30.9]
oak=[1458,	8.6,	4.0,	1.1,	.293,	.717,	4.32,	4.47,	9.8,6240,	.233,	.305,	.392,	.304,	-3.0,	-28.7,	-19.8,	14.3]
sea=[1458.0,	8.8,	2.7,	1.2,	.288,	.729,	3.86,	4.03,	16.7,6240,	.243,	.322,	.417,	.321,	-5.7,58.1	,7.0,	25.3]
tex=[1458.0,	8.9,	3.3,	1.3,	.294,	.718,	4.35,	4.44,	13.7,6240,	.259,	.330,	.442,	.333,	-8.6,	68.6	,28.2	,28.2]
atl=[1458.0,	9.9,	3.2,	1.1,	.299,	.733,	3.88,	3.90,	20.6,6240,	.267,	.340,	.475,	.348,	0.5,133.6,	8.9,	33.7]
nym=[1458.0,	9.0,	3.5,	1.2,	.296,	.716,	4.26,	4.28,	14.5,6240,	.250,	.324,	.422,	.323,	49.1,	-5.2,	15.7,	25.4]
mia=[1458.0,	9.3,	3.4,	1.1,	.299,	.724,	4.08,	4.11,	16.8, 6240,	.257,	.321,	.414,	.319,	-7.9,-13.7,	-4.0,	16.9]
phi=[1458.0,	8.7,	3.2,	1.2,	.295,	.714,	4.18,	4.20,	21.2, 6240,	.256,	.327,	.431,	.327,	-0.4,31.8,	-0.3,	22.5]
wsh=[1458.0,	8.0,	3.7,	1.3,	.296,	.703,	4.73,	4.78,	10.4,6240,	.245,	.309,	.399,	.308,	-5.3,-68.9,	-16.3,	10.4]
chc=[1458.0,	8.5,	3.1,	1.2,	.294,	.720,	4.18,	4.30,	15.4,6240,	.250,	.324,	.419,	.322,	-4.3,	16.4,	17.9,	22.4]
stl=[1458.0,	7.9,	3.1,	1.2,	.294,	.721,	4.15,	4.34,	15.1,6240,	.256,	.335,	.428,	.331,	-4.2,70.9,	-7.3,	25.4]
cin=[1458.0,	9.3,	3.6,	1.4,	.297,	.709,	4.58,	4.57,	15.7,6240,	.252,	.332,	.431,	.330,	-1.9,	11.9,	-14.6,	19.0]
pit=[1458.0,	7.9,	3.4,	1.1,	.297,	.706,	4.39,	4.42,	13.8,6240,	.249,	.326,	.411,	.320,	-8.4,-10.9,	0.3, 17.6]
mil=[1458,	9.1,	3.3,	1.2,	.290,	.728,	4.08,	4.25,	16.8, 6240,	.248,	.327,	.408,	.320,	-1.5, -4.6,	13.1,	20.2]
az=[1458.0,	8.4,	3.2,	1.2,	.296,	.723,	4.10,	4.21,	15.3,6240,	.258,	.332,	.424,	.328,	-2.9,36.1,	20.3,24.8]
sf=[1458.0,	8.7,	3.2,	1.1,	.302,	.718,	4.08,	4.09,	14.1, 6240,	.247,	.323,	.403,	.316,	-11.9,7.7	,	11.1,	20.1]
sd=[1458.0,	8.8,	3.3,	1.2,	.287,	.722,	4.10,	4.32,	14.3,6240,	.251,	.319,	.411,	.317,	-0.1,	20.9,	18.9,	23.4]
col=[1458.0,	7.1,	3.6,	1.4,	.309,	.679,	5.32,	5.12,	8.2,6240,	.257,	.321,	.429,	.324,	-9.1,	-99.1,	10.5,	9.7]
lad=[1458,	9.5,	3.0,	1.3,	.290,	.725,	4.02,	4.09,	20.1,6240,	.257,	.343,	.453,	.342,	-4.0,129.1,	-5.6,	31.4]

X_df, y_df=df.iloc[:,1:-1],df['Wins']

X_train, X_test, y_train, y_test=train_test_split(X_df, y_df, random_state=1)

#initialize, train, and predict
model=RandomForestRegressor(n_estimators=100, random_state=0)
model.fit(X_train, y_train)
df[f"{'Wins'}_pred"]=model.predict(X_df)

#apply stats
r2=pearsonr(df['Wins'], df[f"{'Wins'}_pred"])[0]**2
rmse=mean_squared_error(df['Wins'], df[f"{'Wins'}_pred"])**.5

#visualize
title_text= f"""
R2: {round(r2,3)}
RMSE: {round(rmse, 3)}
"""
sns.regplot(data=df, x=y_df, y=f"{'Wins'}_pred")
plt.title(title_text)
plt.show()

preds={
    'Team':['Bal','Tor','Tb','Bos','Nyy','Cle','Kc','Det','Min','Cws','Laa','Hou','Oak','Sea','Tex',
            'Atl','Nym','Wsh','Mia','Phi','Mil','Stl','Chc','Pit','Cin','Az','Sd','Sf','Col','Lad'],
    'Wins':[round(float(model.predict([bal])),0),
            round(float(model.predict([tor])),0),
            round(float(model.predict([tb])),0),
            round(float(model.predict([bos])),0),
            round(float(model.predict([nyy])),0),
            round(float(model.predict([cle])),0),
            round(float(model.predict([kc])),0),
            round(float(model.predict([det])),0),
            round(float(model.predict([min])),0),
            round(float(model.predict([cws])),0),
            round(float(model.predict([laa])),0),
            round(float(model.predict([hou])),0),
            round(float(model.predict([oak])),0),
            round(float(model.predict([sea])),0),
            round(float(model.predict([tex])),0),
            round(float(model.predict([atl])),0),
            round(float(model.predict([nym])),0),
            round(float(model.predict([wsh])),0),
            round(float(model.predict([mia])),0),
            round(float(model.predict([phi])),0),
            round(float(model.predict([mil])),0),
            round(float(model.predict([stl])),0),
            round(float(model.predict([chc])),0),
            round(float(model.predict([pit])),0),
            round(float(model.predict([cin])),0),
            round(float(model.predict([az])),0),
            round(float(model.predict([sd])),0),
            round(float(model.predict([sf])),0),
            round(float(model.predict([col])),0),
            round(float(model.predict([lad])),0)]
}

preds=pd.DataFrame(preds)
print(preds)

ax=preds.plot(kind='bar', x='Team', y='Wins', legend=False)
for index, value in enumerate(preds['Wins']):
    ax.text(index, value + 0.1, str(value), ha='center', va='bottom')
plt.title('Win Projections')
plt.show()

rf_feat_imp2=pd.DataFrame(data=model.feature_importances_.round(3),
                          index=X_test.columns, columns=['importance'])
rf_feat_imp2.sort_values(by=['importance'], ascending=False)